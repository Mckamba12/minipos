#!/usr/bin/env python3
# minipos - A self-hosted, 0-confirmation Bitcoin Cash point-of-sale server
# Author: Simon Volpert <simon@simonvolpert.com>
# Project page: https://github.com/simon-v/minipos/
# This program is free software, released under the Apache License, Version 2.0. See the LICENSE file for more information
# Consult the README file for usage instructions and other helpful hints

import os
import sys
from wsgiref.simple_server import make_server
import urllib.parse
import datetime
import qrcode
import io
import random
import base64
import threading

import bch # Local library file
import sendmail # Local library file

usage = '''Usage: minipos [DATA_DIRECTORY]
See the README file for more information.'''
config = {
	'addresses': [],
	'lock': {},
}
binary_extensions = ['png', 'jpg', 'gif']
mime_types = {
	'txt': 'text/plain',
	'css': 'text/css',
	'js': 'text/javascript',
	'png': 'image/png',
	'jpg': 'image/jpeg',
	'gif': 'image/gif',
	'svg': 'image/svg+xml',
}
# Look for the directory containing the configuration files
lib_dir = os.path.dirname(os.path.abspath(__file__))
data_dir_locations = [
	os.path.join(os.path.expanduser('~'), '.minipos'),
	os.path.join(os.path.expanduser('~'), '.config', 'minipos'),
	lib_dir,
	os.getcwd()
]
if len(sys.argv) > 1:
	if sys.argv[1] == '-h' or sys.argv[1] == '--help':
		print(usage)
		sys.exit(0)
	else:
		data_dir_locations.insert(0, os.path.abspath(sys.argv[1]))
		if not os.path.isdir(data_dir_locations[0]):
			print('No such directory: ' + data_dir_locations[0])
for data_dir in data_dir_locations:
	try:
		os.chdir(data_dir)
	except (OSError, NotADirectoryError):
		continue
	if os.path.isfile('minipos.cfg'):
		print('Using {dir} as data directory'.format(dir=data_dir))
		break
# Load the config file
try:
	with open('minipos.cfg', 'r') as f:
		lines = f.readlines()
except (IOError, OSError, FileNotFoundError, PermissionError):
	print('Could not open configuration file, using default settings')
	print(sys.exc_info()[1])
	lines = []
for line in lines:
	# Skip blank lines and comments
	if line.strip() == '' or line.startswith('#'):
		continue
	# Split to key and value pairs
	words = line.strip().split('=')
	key = words[0].strip()
	value = '='.join(words[1:]).strip()
	if key == 'address':
		config['addresses'].append(value)
	else:
		config[key] = value
# Read the auxillary address list, if present
try:
	with open('address.list', 'r') as f:
		lines = f.readlines()
except (IOError, OSError, FileNotFoundError, PermissionError):
	lines = []
for line in lines:
	_addr = line.strip()
	if _addr != '' and not _addr in config['addresses']:
		config['addresses'].append(_addr)

# Sanitize the config file
def cast_config_type(key, _type, default):
	try:
		config[key] = _type(config[key])
	except (KeyError, ValueError):
		config[key] = default

cast_config_type('taxrate', float, 0)
cast_config_type('port', int, 8080)
cast_config_type('welcome_timeout', int, 120)
cast_config_type('sightings', int, 3)
if config['sightings'] < 1:
	print("Invalid 'sightings' value, falling back to 1")
	config['sightings'] = 1
if config['welcome_timeout'] < 0:
	raise ValueError('"welcome_timeout" must be >= 0')
cast_config_type('index', int, 0)

def split_config_key(key, default):
	if key not in config:
		config[key] = [default]
	else:
		config[key] = config[key].split(',')

split_config_key('currencies', 'USD')
split_config_key('allowed_ips', '0.0.0.0')
# Prune meaningless values from configuration
config['allowed_ips'] = set(config['allowed_ips'])
if '127.0.0.1' in config['allowed_ips']:
	config['allowed_ips'].remove('127.0.0.1')

def pick_config_list(key, value_list):
	if key not in config:
		config[key] = value_list[0]
	else:
		if config[key] not in value_list:
			print("Invalid '{key}' value, falling back to '{default}'".format(key=key, default=value_list[0]))
			config[key] = value_list[0]

pick_config_list('unit', ['native', 'bits', 'satoshi'])
pick_config_list('payment_return', ['request', 'welcome'])

if 'week_start' not in config or config['week_start'] == 'monday':
	config['week_start'] = 0
elif config['week_start'] == 'sunday':
	config['week_start'] = 1
else:
	print("Invalid 'week_start' value, falling back to 'monday'")
if 'label' not in config or config['label'] == '':
	config['label'] = 'MiniPOS'
exchange_list = []
for e in bch.exchanges:
	exchange_list.append(e['name'])
if 'price_source' not in config or config['price_source'] not in exchange_list:
	print('Using default exchange rate source "{}"'.format(exchange_list[0]))
	config['price_source'] = exchange_list[0]
for k in ['custom_balance_key', 'custom_confirmed_key', 'custom_unconfirmed_key']:
	if k in config and config[k] == '':
		config[k] = None
if 'custom_unit_satoshi' in config:
	config['custom_unit_satoshi'] = True if config['custom_unit_satoshi'] in ['1', 'yes'] else False
config['auto_cents'] = True if 'auto_cents' in config and config['auto_cents'] in ['1', 'yes'] else False

def write_config_file():
	# Open the current config file
	try:
		with open(os.path.join(data_dir, 'minipos.cfg'), 'r') as f:
			lines = f.readlines()
	except (IOError, FileNotFoundError):
		# Or the config file sample
		with open(os.path.join(lib_dir, 'minipos.cfg.sample'), 'r') as f:
			lines = f.readlines()
	# Iterate through the config
	for key in config:
		if key in ['addresses', 'lock']:
			continue
		# Cast types into correct format
		if type(config[key]) in [list, set]:
			value = ','.join(config[key])
		elif key == 'week_start':
			value = {1: 'sunday', 0: 'monday'}[config[key]]
		else:
			value = config[key]
		# Seek for first matching set key
		found = False
		for k in ['{}=', '#{}=']:
			if not found:
				k = k.format(key)
				for i in range(len(lines)):
					if lines[i].startswith(k):
						found = True
						break
		# Replace the matching line
		if found:
			lines[i] = '{}={}\n'.format(key, value)
		# Or append to the end of the config file
		else:
			lines.append('{}={}\n'.format(key, value))
	# Write the config file
	try:
		with open(os.path.join(data_dir, 'minipos.cfg'), 'w') as f:
			f.writelines(lines)
	except (IOError, OSError, PermissionError):
		print('Could not write config file: {}'.format(sys.exc_info()[1]))
	# Write the cached address list to address.list
	address_list = config['addresses'].copy()
	for entry in config['lock'].values():
		address_list.append(entry['address'])
	try:
		with open(os.path.join(data_dir, 'address.list'), 'w') as f:
			for address in config['addresses']:
				f.write(address + '\n')
	except (IOError, OSError, PermissionError):
		print('Could not write address.list: {}'.format(sys.exc_info()[1]))

# Simple logging wrapper
def logger(message):
	print('{} {}'.format(datetime.datetime.now().isoformat().split('.')[0].replace('T', ' '), message))

# Utility wrapper function
def load_file(filename):
	file_mode = 'rb' if filename.split('.')[-1] in binary_extensions else 'r'
	try:
		src = open(os.path.join(data_dir, filename), file_mode)
	except (IOError, OSError, FileNotFoundError, PermissionError):
		src = open(os.path.join(lib_dir, filename), file_mode)
	data = src.read()
	src.close()
	return data

# Cast amount into preferred units
def format_amount(amount):
	if config['unit'] == 'bits':
		return bch.bits(float(amount))
	elif config['unit'] == 'satoshi':
		return str(int(float(amount) * 100000000))
	else:
		return amount


# Create a payment request QR page
def create_invoice(parameters):
	if 'currency' not in parameters:
		parameters['currency'] = config['currencies']
	currency = parameters['currency'][0]
	divider = 100 if config['auto_cents'] else 1
	fiat = float(parameters['amount'][0]) / divider
	if fiat == 0.0 and not os.path.isfile('.debug'):
		raise ValueError('Requested amount cannot be zero')
	# Check for address lock timeouts
	for k in list(config['lock']):
		if check_lock_timeout(k):
			logger('payment request {} timed out'.format(k))
			unlock_address(k)
	# Use the next available address
	if config['addresses'] == []:
		if 'xpub' in config:
			address = bch.generate_address(config['xpub'], config['index'])
			config['addresses'].append(address)
			config['index'] += 1
			write_config_file()
		else:
			return load_file('noaddrs.html')
	address = config['addresses'].pop(0)
	# Generate a lock tag
	tag = ''
	for i in range(7):
		tag += random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
	# Lock the address
	lock_address(tag)
	config['lock'][tag]['address'] = address
	# Get the exchange rate
	try:
		price = bch.get_price(currency, config)
	except KeyboardInterrupt:
		raise
	except:
		print(sys.exc_info()[1])
		return load_file('timeout.html')
	# Calculate amount
	amount = bch.btc(fiat / price)
	# Get current balance
	try:
		balance, unconfirmed = bch.get_balance(address, config=config, verify=True)
	except KeyboardInterrupt:
		raise
	except:
		print(sys.exc_info()[1])
		unlock_address(tag)
		return load_file('timeout.html')
	balance += unconfirmed
	config['lock'][tag]['amount'] = amount
	config['lock'][tag]['fiat'] = bch.fiat(fiat)
	config['lock'][tag]['currency'] = currency
	config['lock'][tag]['balance'] = balance
	# Display invoice
	logger('new invoice {tag}: {amount} BCH ({fiat} {currency}) to {address}'.format(tag=tag, **config['lock'][tag]))
	label = urllib.parse.quote('%s ID:%s' % (config['label'], tag))
	data = 'bitcoincash:{addr}?amount={amt}&message={label}'.format(addr=address, amt=amount, label=label)
	image = qrcode.make(data, error_correction=qrcode.constants.ERROR_CORRECT_L)
	output = io.BytesIO()
	image.save(output)
	output = base64.b64encode(output.getvalue()).decode('UTF-8')
	filler = {
		'addr': address,
		'amt': format_amount(amount),
		'balance': balance,
		'qr': output,
		'request': data,
		'fiat': bch.fiat(fiat),
		'cur': currency,
		'price': bch.fiat(price),
		'tag': tag,
		'return': config['payment_return'],
		'label': config['label'],
	}
	filler['token'] = 'BCH' if config['unit'] == 'native' else 'bits' if config['unit'] == 'bits' else 'satoshi'
	page = load_file('invoice.html').format(**filler)
	return page

# API check if a payment was received
def check_payment(parameters):
	tag = parameters['id'][0]
	if tag not in config['lock']:
		return '2'
	# Update address lock
	if check_lock_timeout(tag):
		logger('payment request {} timed out'.format(k))
		unlock_address(tag)
		return '2'
	lock_address(tag)
	# Check address balance
	address = config['lock'][tag]['address']
	amount = float(config['lock'][tag]['amount'])
	initial = float(config['lock'][tag]['balance'])
	try:
		balance, unconfirmed = bch.get_balance(address, config=config)
	except KeyboardInterrupt:
		raise
	except:
		print('Could not fetch balance: ' + str(sys.exc_info()[1]))
		return '0'
	if balance + unconfirmed >= initial + amount:
		if 'sightings' not in config['lock'][tag]:
			logger('payment {} detected'.format(tag))
			config['lock'][tag]['sightings'] = 0
		config['lock'][tag]['sightings'] += 1
		if config['lock'][tag]['sightings'] >= config['sightings']:
			record_payment(tag)
			unlock_address(tag)
			# Remove this address from future use if generated
			if 'xpub' in config:
				config['addresses'].remove(address)
				write_config_file()
			return '1'
	return '0'

# Write the details of the payment to a log file
def record_payment(tag):
	logger('payment {} received'.format(tag))
	address = config['lock'][tag]['address']
	fiat = config['lock'][tag]['fiat']
	currency = config['lock'][tag]['currency']
	amount = config['lock'][tag]['amount']
	log_dir = os.path.join(data_dir, 'logs')
	if not os.path.isdir(log_dir):
		os.mkdir(log_dir)
	logfile = os.path.join(log_dir, datetime.date.today().isoformat() + '.log')
	with log_lock:
		with open(logfile, 'a') as log:
			log.write('{date}	{addr}	{amt}	{fiat} {cur}	{tag}\n'.format(date=datetime.datetime.now().isoformat(), addr=address, amt=amount, fiat=fiat, cur=currency, tag=tag))

# Lock an address to prevent concurrent access
def lock_address(tag):
	if tag not in config['lock']:
		config['lock'][tag] = {}
	config['lock'][tag]['time'] = datetime.datetime.now()

# Free address lock
def unlock_address(tag):
	if tag in config['lock']:
		config['addresses'].append(config['lock'][tag]['address'])
		del(config['lock'][tag])

# Check address lock timeout
def check_lock_timeout(tag):
	if tag not in config['lock']:
		return True
	delta = datetime.datetime.now() - config['lock'][tag]['time']
	if delta >= datetime.timedelta(seconds=60):
		return True
	return False

# Parse a log file and add its contents to the table
def read_log_file(filename, plaintext=False):
	table = ''
	totals = {}
	for currency in config['currencies']:
		totals[currency] = 0
	try:
		logfile = open(os.path.join(data_dir, filename), 'r')
	except:
		if sys.exc_info()[0] not in [IOError, OSError, FileNotFoundError, PermissionError]:
			print(sys.exc_info()[1])
		return {}, ''
	try:
		for line in logfile.readlines():
			line = line.strip().split('	')
			if len(line) == 4:
				line.append('')
			elif not len(line) == 5:
				raise ValueError
			date, address, amount, fiat, tag = line
			amount = format_amount(amount)
			fiat, currency = fiat.split(' ')
			totals[currency] += float(fiat)
			date = date.split('.')[0].replace('T', ' ')
			if plaintext:
				table += '{date}  {addr}...  {amt}  {fiat} {cur}  {tag}\n'.format(date=date, addr=address[0:10], amt=str(amount).rjust(12), fiat=str(fiat).rjust(15), cur=currency, tag=tag)
			else:
				table += '<tr><td>{date}</td><td>{addr}...</td><td>{amt}</td><td>{fiat} {cur}</td><td>{tag}</td></tr>\n'.format(date=date, addr=address[0:10], amt=amount, fiat=fiat, cur=currency, tag=tag)
	except:
		print('Log file is corrupted: {file} ({error})'.format(file=filename, error=sys.exc_info()[1]))
		msg = 'The log file for {file} is corrupted!'.format(file=filename.split('/')[1].split('.')[0])
		if plaintext:
			table += msg
		else:
			table += '<tr><td colspan="4" class="error">' + msg + '</td></tr>'
	logfile.close()
	return totals, table

# Display a log of recent transactions
def show_logs(parameters, plaintext=False):
	if 'date' not in parameters:
		date = datetime.date.today().isoformat()
	else:
		date = parameters['date'][0]
	# Process the current and calculate next and previous date
	days = []
	# Day scope
	if len(date) == 10:
		d = datetime.datetime.strptime(date, '%Y-%m-%d')
		delta = datetime.timedelta(1)
		next_date = (d + delta).date().isoformat()
		prev_date = (d - delta).date().isoformat()
		tag_s = 'W'
		scope_s = '%s-W%s' % d.isocalendar()[0:2]
		tag_m = 'M'
		scope_m = '%s-%s' % (d.year, str(d.month).zfill(2))
		tag_l = 'Y'
		scope_l = str(d.year)
		days = [date]
	# Week scope
	elif len(date) == 8:
		# Convert ISO week to Python date
		_year = int(date[0:4])
		_week = int(date[6:8])
		ref_date = datetime.date(_year, 1, 4)
		ref_week, ref_day = ref_date.isocalendar()[1:3]
		d = (ref_date + datetime.timedelta(days=1-ref_day, weeks=_week-ref_week))
		# Calculate offsets
		delta = datetime.timedelta(7)
		next_date = '%s-W%02d' % (d + delta).isocalendar()[0:2]
		prev_date = '%s-W%02d' % (d - delta).isocalendar()[0:2]
		tag_s = 'D'
		scope_s = (d + datetime.timedelta(3)).isoformat()
		tag_m = 'M'
		scope_m = '%s-%s' % (d.year, str(d.month).zfill(2))
		tag_l = 'Y'
		scope_l = str(d.year)
		# Populate date list
		for i in range(7):
			days.append((d + datetime.timedelta(i - config['week_start'])).isoformat())
	# Month scope
	elif len(date) == 7:
		d = datetime.datetime.strptime(date, '%Y-%m')
		if d.month == 12:
			year, month = d.year + 1, 1
		else:
			year, month = d.year, d.month + 1
		next_date = '%s-%s' % (year, str(month).zfill(2))
		if d.month == 1:
			year, month = d.year - 1, 12
		else:
			year, month = d.year, d.month - 1
		prev_date = '%s-%s' % (year, str(month).zfill(2))
		tag_s = 'D'
		scope_s = '%s-%s-15' % (d.year, str(d.month).zfill(2))
		tag_m = 'W'
		scope_m = '%s-W%02d' % (d + datetime.timedelta(15)).isocalendar()[0:2]
		tag_l = 'Y'
		scope_l = str(d.year)
		# Populate date list
		_date = datetime.date(d.year, d.month, 1)
		while _date.month == d.month:
			days.append(_date.isoformat())
			_date += datetime.timedelta(1)
	# Year scope
	elif len(date) == 4:
		d = datetime.datetime.strptime(date, '%Y')
		next_date = str(d.year + 1)
		prev_date = str(d.year - 1)
		tag_s = 'D'
		scope_s = '%s-06-15' % d.year
		tag_m = 'W'
		scope_m = '%s-W26' % d.year
		tag_l = 'M'
		scope_l = '%s-06' % d.year
		# Populate date list
		_date = datetime.date(d.year, 1, 1)
		while _date.year == d.year:
			days.append(_date.isoformat())
			_date += datetime.timedelta(1)
	else:
		raise ValueError
	# Create a transaction table and calculate totals
	if plaintext:
		page = '===== Summary for {date} ====='.format(date=date)
	else:
		page = load_file('logs.html')
	table = ''
	table_head = ''
	table_foot = ''
	summary = ''
	totals = {}
	# Compile transaction table and calculate date totals
	for _date in days:
		_totals, _table = read_log_file(os.path.join('logs', _date + '.log'), plaintext)
		table += _table
		for k in _totals.keys():
			if k in totals:
				totals[k] += _totals[k]
			else:
				totals[k] = _totals[k]
	for sign in totals.keys():
		if totals[sign] != 0:
			if plaintext:
				chunk = '{fiat} {cur}\n'
			else:
				chunk = '<p>{fiat} {cur}</p>\n'
			summary += chunk.format(fiat=bch.fiat(totals[sign]), cur=sign)
	# Format and return the logs page
	if table != '':
		token = 'BCH' if config['unit'] == 'native' else 'bits' if config['unit'] == 'bits' else 'satoshi'
		if plaintext:
			table_head = '====== Date =======||== Address ==||== Amount ({token}) ==||== Amount (fiat) ==||== ID =='.format(token=token)
		else:
			table_head = '<h2>Transactions:</h2>\n<table class="listing">\n<tr><th>Date and time</th><th>Address</th><th>Amount ({token})</th><th>Amount (fiat)</th><th>ID</th></tr>\n'.format(token=token)
			table_foot = '</table>\n'
	else:
		if plaintext:
			summary = 'No transactions.'
		else:
			summary = '<p>No transactions.</p>'
	if plaintext:
		return '\n'.join([page, summary, table_head, table])
	else:
		# Load print header and footer
		try:
			header = load_file('log_header.html')
		except (IOError, OSError, FileNotFoundError, PermissionError):
			header = ''
		try:
			footer = load_file('log_footer.html')
		except (IOError, OSError, FileNotFoundError, PermissionError):
			footer = ''
		table = table_head + table + table_foot
		# Pack the above variables into a filler dict
		label = config['label']
		params = {}
		_names = ['date', 'prev_date', 'tag_s', 'scope_s', 'tag_m', 'scope_m', 'tag_l', 'scope_l', 'next_date', 'header', 'summary', 'table', 'footer', 'label']
		for n in _names:
			params[n] = locals()[n]
		return page.format(**params)

# Main webapp function
def minipos(environ, start_response):
	error = load_file('error.html')
	headers = [('Content-type', 'text/html; charset=UTF-8')]
	status = '200 OK'
	page = ''
	filler = ()
	if 'HTTP_X_REAL_IP' in environ:
		environ['REMOTE_ADDR'] = environ['HTTP_X_REAL_IP']
	ip_addr = environ['REMOTE_ADDR']
	subnet = '.'.join(ip_addr.split('.')[0:3]) + '.0'
	if ip_addr != '127.0.0.1' and '0.0.0.0' not in config['allowed_ips'] and ip_addr not in config['allowed_ips'] and subnet not in config['allowed_ips']:
		status = '403 Not Allowed'
		page = error.format(err=status)
		start_response(status, headers)
		return [bytes(page, 'UTF-8')]
	request = environ['PATH_INFO'].lstrip('/').split('/')[-1]
	parameters = urllib.parse.parse_qs(environ['QUERY_STRING'])
	# Handle specific content-types
	extension = request.split('.')[-1]
	if extension in mime_types:
		headers = [('Content-Type', mime_types[extension])]
	# Handle specific app pages
	elif request == 'invoice':
		try:
			page = create_invoice(parameters)
		except ValueError:
			status = '303 See Other\nLocation: request'
			page = 'Redirecting...'
		except:
			if sys.exc_info()[0] is KeyError:
				print('Missing required GET argument: ' + str(sys.exc_info()[1]))
			else:
				print(sys.exc_info()[1])
			status = '400 Bad Request'
			page = error.format(err=status)
	elif request == 'check':
		page = check_payment(parameters)
		headers = [('Content-type', 'text/plain')]
	elif request == 'cancel':
		try:
			tag = parameters['id'][0]
			if tag:
				logger('payment {} cancelled'.format(tag))
				unlock_address(tag)
		except:
			if sys.exc_info()[0] is KeyError:
				print('Missing required GET argument: ' + str(sys.exc_info()[1]))
			else:
				print(sys.exc_info()[1])
		status = '303 See Other\nLocation: {}'.format(config['payment_return'])
		page = 'Redirecting...'
	elif request == 'logs':
		try:
			page = show_logs(parameters)
		except:
			print(sys.exc_info()[1])
			status = '400 Bad Request'
			page = error.format(err=status)
	elif request == 'email':
		headers = [('Content-type', 'text/plain')]
		if 'date' not in parameters:
			date = datetime.date.today().isoformat()
		else:
			date = parameters['date'][0]
		if 'email' not in config:
			print('Email not configured.')
			page = '0'
		elif sendmail.send(config, config['email'], '[MiniPOS] Transaction listing for ' + date, show_logs(parameters, plaintext=True)):
			page = '1'
		else:
			page = '0'
	elif request == 'welcome':
		page = load_file('welcome.html').format(label=config['label'])
	elif request == 'request':
		if len(config['currencies']) == 1:
			disabled = 'disabled'
		else:
			disabled = ''
		if config['taxrate'] < 0:
			tax = 'Discount'
		else:
			tax = 'Tax'
		filler = {
			'currencies': repr(config['currencies']),
			'timeout': config['welcome_timeout'],
			'disabled': disabled,
			'cur': config['currencies'][0],
			'tax': tax,
			'taxrate': config['taxrate'],
			'label': config['label'],
			'centkey': '00' if config['auto_cents'] else '.',
		}
		page = load_file('request.html').format(**filler)
	# Redirect blank request to main page
	elif request == '':
		if config['welcome_timeout'] > 0:
			status = '303 See Other \nLocation: welcome'
		else:
			status = '303 See Other \nLocation: request'
		page = 'Redirecting...'
	# Load non-generated files from disk
	if page == '':
		try:
			page = load_file(os.path.join('assets', request))
		except:
			headers = [('Content-type', 'text/html; charset=UTF-8')]
			status = '404 Not Found'
			page = error.format(err=status)
			print(sys.exc_info()[1])
	# Serve the page
	start_response(status, headers)
	if type(page) is bytes:
		return [page]
	return [bytes(page, 'UTF-8')]

# Start the web server
random.seed()
log_lock = threading.Lock()
# Make sure xpub works
if 'xpub' in config:
	try:
		address = bch.generate_address(config['xpub'], config['index'])
	except:
		err = sys.exc_info()
		if err[0] in (ImportError, ModuleNotFoundError):
			print("pycoin is not installed, address generation unavailable")
		else:
			print(err[1])
		del(config['xpub'])
	else:
		config['addresses'].append(address)
		config['index'] += 1
		write_config_file()
if config['addresses'] == []:
	print('No receiving addresses available. Please add some receiving addresses or an extended public key to your config file.')
	sys.exit(2)
httpd = make_server('', config['port'], minipos)
print('Serving minipos on port {port}...'.format(**config))
try:
	httpd.serve_forever()
except KeyboardInterrupt:
	print('Server stopped.')
